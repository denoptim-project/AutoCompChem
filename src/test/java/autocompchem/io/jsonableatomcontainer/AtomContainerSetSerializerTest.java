package autocompchem.io.jsonableatomcontainer;

import static org.junit.Assert.assertFalse;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;

import javax.vecmath.Point3d;

import org.junit.jupiter.api.Test;
import org.openscience.cdk.AtomContainerSet;
import org.openscience.cdk.DefaultChemObjectBuilder;
import org.openscience.cdk.interfaces.IAtom;
import org.openscience.cdk.interfaces.IAtomContainer;
import org.openscience.cdk.interfaces.IBond;
import org.openscience.cdk.interfaces.IChemObjectBuilder;
import org.openscience.cdk.tools.periodictable.PeriodicTable;

import com.google.gson.Gson;

import autocompchem.chemsoftware.DirComponentAddress;
import autocompchem.chemsoftware.DirectiveComponentType;
import autocompchem.io.ACCJson;
import autocompchem.io.IOtools;


public class AtomContainerSetSerializerTest 
{
  
	private static IChemObjectBuilder chemBuilder = 
    		DefaultChemObjectBuilder.getInstance();
	
	private final static double PARAM_A = 1.0;
	private final static double PARAM_B = 2.5;

//------------------------------------------------------------------------------

    /**
     * Generated the X coordinate from a hard-coded function that define a 
     * spiral.
     * @param the parameter for generating the coordinates
     * @return the coordinate X generated by the given parameter
     */
	public static double getSpiralCoordX(double parameter)
	{
		return (PARAM_A + PARAM_B*Math.abs(parameter)) 
				* Math.cos(Math.abs(parameter));
	}
	
//------------------------------------------------------------------------------

    /**
     * Generated the Y coordinate from a hard-coded function that define a 
     * spiral.
     * @param the parameter for generating the coordinates
     * @return the coordinate Y generated by the given parameter
     */
	public static double getSpiralCoordY(double parameter)
	{
		return (PARAM_A + PARAM_B*Math.abs(parameter)) 
				* Math.sin(Math.abs(parameter));
	}
	
//------------------------------------------------------------------------------

    /**
     * Builds an atom container that has a given number of atoms arranged as to 
     * follow a spiral.
     * @param numAtoms the number of atoms to have in the resulting container.
     * @return an atom container for testing purposes.
     */
    public static IAtomContainer getTestIAtomContainer(int numAtoms)
    {
    	IAtomContainer iac = chemBuilder.newAtomContainer();
    	for (int i=0; i<numAtoms; i++)
    	{
	    	IAtom a = chemBuilder.newAtom();
	    	a.setSymbol(PeriodicTable.getSymbol(i+1));
	        a.setPoint3d(new Point3d(getSpiralCoordX(i), getSpiralCoordY(i), i));
	        iac.addAtom(a);
	        if (i>0)
	        {
	            iac.addBond(i-1, i, IBond.Order.SINGLE);
	        }
    	}
    	return iac;
    }
    
//------------------------------------------------------------------------------

    /**
     * @return a collection of atom containers for testing purposes.
     */
    public static AtomContainerSet getTestJSONableIAtomContainer()
    {
    	AtomContainerSet cSet = new AtomContainerSet();
    	for (int i=0; i<5; i++)
    	{
    		cSet.addAtomContainer(getTestIAtomContainer(i+4));
    	}
    	return cSet;
    }

//------------------------------------------------------------------------------

    @Test
    public void testJSONRoundTrip() throws Exception
    {
    	Gson writer = ACCJson.getWriter();
    	Gson reader = ACCJson.getReader();
    	
    	AtomContainerSet original = getTestJSONableIAtomContainer();
    	
    	String json = writer.toJson(original);
    	AtomContainerSet fromJson = reader.fromJson(json, 
    			AtomContainerSet.class);

    	assertEquals(original.getAtomContainerCount(), 
    			fromJson.getAtomContainerCount());
    	
    	for (int i=0; i<original.getAtomContainerCount(); i++)
    	{
    		JSONableIAtomContainer lwOriginal = new JSONableIAtomContainer(
    				original.getAtomContainer(i));
    		JSONableIAtomContainer lwFromJson = new JSONableIAtomContainer(
    				fromJson.getAtomContainer(i));
    		assertTrue(lwOriginal.equals(lwFromJson));
    	}
    	
    	for (IAtomContainer iac : fromJson.atomContainers())
    	{
    		iac.getAtom(0).setSymbol("Ru");
    	}
    	
    	for (int i=0; i<original.getAtomContainerCount(); i++)
    	{
    		JSONableIAtomContainer lwOriginal = new JSONableIAtomContainer(
    				original.getAtomContainer(i));
    		JSONableIAtomContainer lwFromJson = new JSONableIAtomContainer(
    				fromJson.getAtomContainer(i));
    		assertFalse(lwOriginal.equals(lwFromJson));
    	}
    	
    	String json2 = writer.toJson(fromJson);
    	AtomContainerSet fromJson2 = reader.fromJson(json2, 
    			AtomContainerSet.class);
    	
    	assertEquals(original.getAtomContainerCount(), 
    			fromJson2.getAtomContainerCount());
    	
    	for (int i=0; i<fromJson2.getAtomContainerCount(); i++)
    	{
    		JSONableIAtomContainer lwOriginal = new JSONableIAtomContainer(
    				original.getAtomContainer(i));
    		JSONableIAtomContainer lwFromJson2 = new JSONableIAtomContainer(
    				fromJson2.getAtomContainer(i));
    		assertFalse(lwOriginal.equals(lwFromJson2));
    	}
    }
    	
//------------------------------------------------------------------------------

}
